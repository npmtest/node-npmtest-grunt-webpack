{"/home/travis/build/npmtest/node-npmtest-grunt-webpack/test.js":"/* istanbul instrument in package npmtest_grunt_webpack */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-webpack/lib.npmtest_grunt_webpack.js":"/* istanbul instrument in package npmtest_grunt_webpack */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_webpack = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_webpack = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-webpack/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-webpack && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_webpack */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_webpack\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_webpack.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_webpack.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_webpack.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_webpack.__dirname + '/lib.npmtest_grunt_webpack.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-webpack/node_modules/grunt-webpack/tasks/webpack-dev-server.js":"'use strict';\nconst webpack = require('webpack');\nconst OptionHelper = require('../src/options/WebpackDevServerOptionHelper');\nconst ProgressPluginFactory = require('../src/plugins/ProgressPluginFactory');\nconst HotModuleReplacementPluginFactory = require('../src/plugins/HotModuleReplacementPluginFactory');\n\nmodule.exports = (grunt) => {\n  let WebpackDevServer;\n  try {\n    WebpackDevServer = require('webpack-dev-server');\n  } catch (err) {\n    grunt.registerTask('webpack-dev-server', 'webpack-dev-server not installed.', () => {\n      grunt.fail.fatal(\n        `webpack-dev-server is currently not installed, this task will do nothing.\n\nTo fix this problem install webpack-dev-server by doing either\nnpm install --save webpack-dev-server \nor \nyarn add webpack-dev-server`);\n    });\n    return;\n  }\n\n  const processPluginFactory = new ProgressPluginFactory(grunt);\n  const hotModuleReplacementPluginFactory = new HotModuleReplacementPluginFactory(grunt);\n\n  grunt.registerMultiTask('webpack-dev-server', 'Start a webpack-dev-server.', function webpackDevServerTask() {\n    const done = this.async();\n    const optionHelper = new OptionHelper(grunt, this);\n\n    const opts = {\n      host: optionHelper.get('host'),\n      hot: optionHelper.get('hot'),\n      https: optionHelper.get('https'),\n      inline: optionHelper.get('inline'),\n      keepalive: optionHelper.get('keepalive'),\n      port: optionHelper.get('port'),\n      progress: optionHelper.get('progress')\n    };\n\n    const webpackOptions = optionHelper.getWebpackOptions();\n\n    if (opts.inline) {\n      const protocol = opts.https ? 'https' : 'http';\n      const devClient = [\n        `webpack-dev-server/client?${protocol}://${opts.host}:${opts.port}`\n      ];\n      if (opts.hot) devClient.push('webpack/hot/dev-server');\n\n      // TODO can ww extract that and make it nice\n      [].concat(webpackOptions).forEach((webpackOptions) => {\n        if (typeof webpackOptions.entry === 'object' && !Array.isArray(webpackOptions.entry)) {\n          Object.keys(webpackOptions.entry).forEach((key) => {\n            webpackOptions.entry[key] = devClient.concat(webpackOptions.entry[key]);\n          });\n        } else {\n          webpackOptions.entry = devClient.concat(webpackOptions.entry);\n        }\n      });\n    }\n\n    const compiler = webpack(webpackOptions);\n\n    if (opts.progress) processPluginFactory.addPlugin(this.target, compiler);\n\n    // TODO does this work? or do we add the module in the initial config?\n    if (opts.inline && opts.hot) hotModuleReplacementPluginFactory.addPlugin(this.target, compiler);\n\n    (new WebpackDevServer(compiler, optionHelper.getWebpackDevServerOptions())).listen(opts.port, opts.host, () => {\n      grunt.log.writeln(`\\rwebpack-dev-server on port ${opts.port}  `);\n      if (!opts.keepalive) done();\n    });\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-webpack/node_modules/grunt-webpack/src/options/WebpackDevServerOptionHelper.js":"'use strict';\nconst defaults = require('./default');\nconst OptionHelper = require('./OptionHelper');\n\nclass WebpackOptionHelper extends OptionHelper {\n\n  getDefaultOptions() {\n    return Object.assign({}, defaults.gruntOptions, defaults.webpackDevServerOptions);\n  }\n\n  getWebpackOptions() {\n    const options = this.getOptions().webpack;\n\n    if (Array.isArray(options)) {\n      return options.map((opt) => this.filterGruntOptions(opt));\n    }\n\n    return this.filterGruntOptions(options);\n  }\n\n  getWebpackDevServerOptions() {\n    const options = this.getOptions();\n\n    if (Array.isArray(options)) {\n      return options.map((opt) => {\n        delete options.webpack;\n\n        return this.filterGruntOptions(opt);\n      });\n    }\n\n    delete options.webpack;\n\n    return this.filterGruntOptions(options);\n  }\n}\n\nmodule.exports = WebpackOptionHelper;\n","/home/travis/build/npmtest/node-npmtest-grunt-webpack/node_modules/grunt-webpack/src/options/default.js":"'use strict';\n\nconst mergeWith = require('lodash/mergeWith');\n\nconst gruntOptions = {\n  failOnError: true,\n  progress: process.stdout.isTTY,\n  storeStatsTo: null,\n  keepalive: (options) => {\n    // if watch enabled also default to keepalive true\n    return Array.isArray(options) ? options.some(option => option.watch) : Boolean(options.watch);\n  },\n  inline: false,\n};\n\nconst webpackOptions = {\n  stats: {\n    colors: true,\n    hash: false,\n    timings: false,\n    assets: true,\n    chunks: false,\n    chunkModules: false,\n    modules: false,\n    children: true,\n  },\n};\n\nconst webpackDevServerOptions = {\n  port: 8080,\n  host: 'localhost',\n  hot: false,\n  keepalive: true,\n  stats: {\n    colors: true,\n    hash: false,\n    timings: false,\n    assets: true,\n    chunks: false,\n    chunkModules: false,\n    modules: false,\n    children: true\n  },\n};\n\nfunction mergeCustomize(a, b) {\n  if (Array.isArray(a) && Array.isArray(b)) {\n    return a.concat(b);\n  }\n}\n\nfunction mergeOptions(defaultOptions, options, targetOptions) {\n  let result;\n  if (Array.isArray(targetOptions)) {\n    result = targetOptions.map(opt => mergeWith({}, defaultOptions, options, opt, mergeCustomize));\n  } else {\n    result = mergeWith({}, defaultOptions, options, targetOptions, mergeCustomize);\n  }\n\n  return result;\n}\n\nexports.gruntOptions = gruntOptions;\nexports.webpackOptions = webpackOptions;\nexports.webpackDevServerOptions = webpackDevServerOptions;\n\nexports.mergeOptions = mergeOptions;\n","/home/travis/build/npmtest/node-npmtest-grunt-webpack/node_modules/grunt-webpack/src/options/OptionHelper.js":"'use strict';\nconst defaults = require('./default');\n\nclass OptionHelper {\n\n  constructor(grunt, task) {\n    this.grunt = grunt;\n    this.task = task;\n  }\n\n  generateOptions() {\n    const baseOptions = this.getWithPlugins([this.task.name, 'options']);\n    if (Array.isArray(baseOptions)) throw new Error('webpack.options must be an object, but array was provided');\n\n    return defaults.mergeOptions(\n      this.getDefaultOptions(),\n      baseOptions,\n      this.getWithPlugins([this.task.name, this.task.target])\n    );\n  }\n\n  getOptions() {\n    if (!this.options) {\n      this.options = this.generateOptions();\n    }\n\n    return this.options;\n  }\n\n  get(name) {\n    const options = this.getOptions();\n    let option = undefined;\n\n    if (Array.isArray(options)) {\n      let value = undefined;\n      options.some((opt) => {\n        value = opt[name];\n        return value != undefined;\n      });\n\n      option = value;\n    } else {\n      option = options[name];\n    }\n\n    return typeof option === 'function' ? option(options) : option;\n  }\n\n  getWithPlugins(ns) {\n    const obj = this.grunt.config(ns) || {};\n\n    if (Array.isArray(obj)) {\n      obj.forEach((options, index) => {\n        this.fixPlugins(options, ns.concat([`${index}`, 'plugins']));\n      });\n    } else {\n      if (obj.webpack) {\n        // handle webpack-dev-server options\n        this.fixPlugins(obj.webpack, ns.concat(['webpack', 'plugins']));\n      } else {\n        this.fixPlugins(obj, ns.concat(['plugins']));\n      }\n    }\n\n    return obj;\n  }\n\n  fixPlugins(obj, ns) {\n    if (obj.plugins) {\n      // getRaw must be used or grunt.config will clobber the types (i.e.\n      // the array won't a BannerPlugin, it will contain an Object)\n      const plugins = this.grunt.config.getRaw(ns);\n      obj.plugins = plugins.map(plugin => this.fixPlugin(plugin));\n    }\n\n    return obj;\n  }\n\n  fixPlugin(plugin) {\n    if (typeof plugin === 'function') return plugin;\n\n    // Operate on a copy of the plugin, since the webpack task\n    // can be called multiple times for one instance of a plugin\n    const instance = Object.create(plugin);\n    Object.keys(plugin).forEach((key) => {\n      if (typeof plugin[key] === 'string') {\n        instance[key] = this.grunt.template.process(plugin[key]);\n      }\n    });\n\n    return instance;\n  }\n\n  filterGruntOptions(options) {\n    const result = Object.assign({}, options);\n    Object.keys(defaults.gruntOptions).forEach(key => delete result[key]);\n\n    return result;\n  }\n}\n\nmodule.exports = OptionHelper;\n","/home/travis/build/npmtest/node-npmtest-grunt-webpack/node_modules/grunt-webpack/src/plugins/ProgressPluginFactory.js":"'use strict';\nconst ProgressPlugin = require('webpack/lib/ProgressPlugin');\n\nclass ProgressPluginFactory {\n\n  constructor(grunt) {\n    this.grunt = grunt;\n  }\n\n  addPlugin(target, compiler) {\n    let chars = 0;\n    compiler.apply(new ProgressPlugin((percentage, msg) => {\n      if (percentage < 1) {\n        percentage = Math.floor(percentage * 100);\n        msg = percentage + '% ' + msg;\n        if (percentage < 100) msg = ' ' + msg;\n        if (percentage < 10) msg = ' ' + msg;\n      }\n      for (; chars > msg.length; chars--)\n        this.grunt.log.write('\\b \\b');\n      chars = msg.length;\n      for (let i = 0; i < chars; i++)\n        this.grunt.log.write('\\b');\n      this.grunt.log.write(msg);\n    }));\n  }\n}\n\nmodule.exports = ProgressPluginFactory;\n","/home/travis/build/npmtest/node-npmtest-grunt-webpack/node_modules/grunt-webpack/src/plugins/HotModuleReplacementPluginFactory.js":"'use strict';\nconst HotModuleReplacementPlugin = require('webpack/lib/HotModuleReplacementPlugin');\n\nclass HotModuleReplacementPluginFactory {\n\n  constructor(grunt) {\n    this.grunt = grunt;\n  }\n\n  addPlugin(target, compiler) {\n    compiler.apply(new HotModuleReplacementPlugin());\n  }\n}\n\nmodule.exports = HotModuleReplacementPluginFactory;\n","/home/travis/build/npmtest/node-npmtest-grunt-webpack/node_modules/grunt-webpack/tasks/webpack.js":"'use strict';\r\nconst webpack = require('webpack');\r\nconst OptionHelper = require('../src/options/WebpackOptionHelper');\r\nconst CachePluginFactory = require('../src/plugins/CachePluginFactory');\r\nconst ProgressPluginFactory = require('../src/plugins/ProgressPluginFactory');\r\n\r\nmodule.exports = (grunt) => {\r\n  const cachePluginFactory = new CachePluginFactory();\r\n  const processPluginFactory = new ProgressPluginFactory(grunt);\r\n\r\n  grunt.registerMultiTask('webpack', 'Webpack files.', function webpackTask() {\r\n    const done = this.async();\r\n    const optionHelper = new OptionHelper(grunt, this);\r\n\r\n    const watch = optionHelper.get('watch');\r\n    const opts = {\r\n      cache: watch ? false : optionHelper.get('cache'),\r\n      failOnError: optionHelper.get('failOnError'),\r\n      keepalive: optionHelper.get('keepalive'),\r\n      progress: optionHelper.get('progress'),\r\n      stats: optionHelper.get('stats'),\r\n      storeStatsTo: optionHelper.get('storeStatsTo'),\r\n      watch: watch,\r\n    };\r\n\r\n    const webpackOptions = optionHelper.getWebpackOptions();\r\n\r\n    const compiler = webpack(webpackOptions);\r\n\r\n    if (opts.cache) cachePluginFactory.addPlugin(this.target, compiler);\r\n    if (opts.progress) processPluginFactory.addPlugin(this.target, compiler);\r\n\r\n    const handler = (err, stats) => {\r\n      if (opts.cache) cachePluginFactory.updateDependencies(this.target, compiler);\r\n      if (err) return done(err);\r\n\r\n      if (opts.stats && !stats.hasErrors()) {\r\n        grunt.log.writeln(stats.toString(opts.stats));\r\n      }\r\n\r\n      if (typeof opts.storeStatsTo === 'string') {\r\n        grunt.config.set(opts.storeStatsTo, stats.toJson(opts.stats));\r\n      }\r\n\r\n      if (stats.hasErrors()) {\r\n        // in case opts.stats === false we still want to display errors.\r\n        grunt.log.writeln(stats.toString(opts.stats || 'errors-only'));\r\n        if (opts.failOnError) {\r\n          // construct error without stacktrace, as the stack is not relevant here\r\n          const error = new Error();\r\n          error.stack = null;\r\n          return done(error);\r\n        }\r\n      }\r\n\r\n      if (!opts.keepalive) done();\r\n    };\r\n\r\n    if (opts.watch) {\r\n      compiler.watch(webpackOptions.watchOptions || {}, handler);\r\n    } else {\r\n      compiler.run(handler);\r\n    }\r\n  });\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-grunt-webpack/node_modules/grunt-webpack/src/options/WebpackOptionHelper.js":"'use strict';\nconst defaults = require('./default');\nconst OptionHelper = require('./OptionHelper');\n\nclass WebpackOptionHelper extends OptionHelper {\n\n  getDefaultOptions() {\n    return Object.assign({}, defaults.gruntOptions, defaults.webpackOptions);\n  }\n\n  getWebpackOptions() {\n    const options = this.getOptions();\n\n    if (Array.isArray(options)) {\n      return options.map((opt) => this.filterOptions(opt));\n    }\n\n    return this.filterOptions(options);\n  }\n\n  filterOptions(options) {\n    if (!options.watch) {\n      // ensure cache is disabled in non watch mode, as we add our own CachePlugin to support\n      // multiple targets in one run with different caches\n      options.cache = false;\n    }\n\n    return this.filterGruntOptions(options);\n  }\n}\n\nmodule.exports = WebpackOptionHelper;\n","/home/travis/build/npmtest/node-npmtest-grunt-webpack/node_modules/grunt-webpack/src/plugins/CachePluginFactory.js":"'use strict';\nconst CachePlugin = require('webpack/lib/CachePlugin');\n\nclass CachePluginFactory {\n\n  constructor() {\n    this.plugins = {};\n    this.dependencies = {};\n  }\n\n  addPlugin(target, compiler) {\n    if (!this.plugins[target]) {\n      this.plugins[target] = new CachePlugin();\n    }\n    compiler.apply(this.plugins[target]);\n    if (this.dependencies[target]) {\n      compiler._lastCompilationFileDependencies = this.dependencies[target].file;\n      compiler._lastCompilationContextDependencies = this.dependencies[target].context;\n    }\n  }\n\n  updateDependencies(target, compiler) {\n    this.dependencies[target] = {\n      file: compiler._lastCompilationFileDependencies,\n      context: compiler._lastCompilationContextDependencies\n    };\n  }\n}\n\nmodule.exports = CachePluginFactory;\n"}